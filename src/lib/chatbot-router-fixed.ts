import { NextResponse } from 'next/server';
import ChatbotCache from './chatbot-cache';

// Chatbot Intent Router Service
class ChatbotIntentRouter {
  // Map intents to appropriate service endpoints
  private static readonly INTENT_SERVICE_MAP: { [key: string]: string } = {
    // Projects related intents
    'projects': '/api/chatbot/projects',
    
    // About/Personal related intents  
    'about': '/api/chatbot/about',
    
    // Contact related intents
    'contact': '/api/chatbot/contact',
    
    // Skills related intents
    'skills': '/api/chatbot/skills',
    
    // Blog related intents
    'blog': '/api/chatbot/blog',
    
    // Fallback intents
    'greeting': '/api/chatbot/about',
    'help': '/api/chatbot/about',
    'default': '/api/chatbot/about'
  };

  // Fallback responses for unmatched intents
  private static readonly FALLBACK_RESPONSES = [
    "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ d·ª± √°n, k·ªπ nƒÉng, kinh nghi·ªám, blog ho·∫∑c th√¥ng tin li√™n h·ªá. B·∫°n mu·ªën bi·∫øt g√¨ c·ª• th·ªÉ?",
    "Xin ch√†o! T√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n v·ªÅ projects, skills, experience, blog posts v√† contact information.",
    "Hi there! I can help you learn about projects, skills, background, blog content v√† ways to get in touch.",
    "T√¥i s·∫µn s√†ng tr·∫£ l·ªùi v·ªÅ portfolio, technical skills, work experience, recent blogs v√† contact details!"
  ];  // Route intent to appropriate microservice
  static async routeIntent(intent: string, userMessage: string, baseUrl: string): Promise<any> {
    try {
      // Handle navigation intents directly
      if (intent.startsWith('navigate_')) {
        const navigationResponses = {
          navigate_home: `üè† **ƒêang chuy·ªÉn ƒë·∫øn trang Home...**

‚ú® **Trang ch·ªß bao g·ªìm:**
‚Ä¢ Welcome message v√† introduction
‚Ä¢ Featured projects showcase
‚Ä¢ Quick overview v·ªÅ skills
‚Ä¢ Call-to-action cho contact

üéØ **Perfect ƒë·ªÉ:**
‚Ä¢ First impression v·ªõi visitors
‚Ä¢ Quick overview v·ªÅ portfolio
‚Ä¢ Navigate t·ªõi other sections
‚Ä¢ Professional introduction

*Trang s·∫Ω ƒë∆∞·ª£c chuy·ªÉn trong gi√¢y l√°t...*`,

          navigate_about: `üë§ **ƒêang chuy·ªÉn ƒë·∫øn trang About...**

üìã **Th√¥ng tin chi ti·∫øt v·ªÅ:**
‚Ä¢ Professional background & experience
‚Ä¢ Education v√† qualifications
‚Ä¢ Detailed skills breakdown
‚Ä¢ Career journey timeline
‚Ä¢ Personal interests & hobbies

üíº **For recruiters:**
‚Ä¢ Complete professional profile
‚Ä¢ Work experience details
‚Ä¢ Technical competencies
‚Ä¢ Cultural fit indicators

*ƒêang load trang About...*`,

          navigate_projects: `üöÄ **ƒêang chuy·ªÉn ƒë·∫øn trang Projects...**

üíª **Showcase bao g·ªìm:**
‚Ä¢ Live demos c·ªßa t·∫•t c·∫£ projects
‚Ä¢ Source code links (GitHub)
‚Ä¢ Technology stacks used
‚Ä¢ Project descriptions & features
‚Ä¢ Screenshots & previews

üîç **Technical assessment:**
‚Ä¢ Code quality evaluation
‚Ä¢ Modern development practices
‚Ä¢ Problem-solving approaches
‚Ä¢ UI/UX design skills

*Loading Projects page...*`,

          navigate_blog: `üìù **ƒêang chuy·ªÉn ƒë·∫øn trang Blog...**

üìö **Technical content:**
‚Ä¢ Development tutorials & tips
‚Ä¢ Industry insights & trends
‚Ä¢ Problem-solving articles
‚Ä¢ Learning journey sharing
‚Ä¢ Best practices discussions

üí° **Shows:**
‚Ä¢ Technical writing skills
‚Ä¢ Knowledge sharing ability
‚Ä¢ Continuous learning mindset
‚Ä¢ Communication effectiveness

*ƒêang chuy·ªÉn t·ªõi Blog...*`,

          navigate_contact: `üìß **ƒêang chuy·ªÉn ƒë·∫øn trang Contact...**

ü§ù **Professional communication:**
‚Ä¢ Direct contact form
‚Ä¢ Email v√† phone information
‚Ä¢ Social media links
‚Ä¢ Response time expectations
‚Ä¢ Preferred communication methods

üíº **For business inquiries:**
‚Ä¢ Project collaboration opportunities
‚Ä¢ Technical consultation
‚Ä¢ Career opportunities
‚Ä¢ Partnership discussions

*Loading Contact page...*`,

          navigate_general: `üß≠ **Navigation Guide**

**Available pages:**
‚Ä¢ **Home** - Portfolio overview
‚Ä¢ **About** - Professional background
‚Ä¢ **Projects** - Technical showcase
‚Ä¢ **Blog** - Articles & insights
‚Ä¢ **Contact** - Get in touch

B·∫°n mu·ªën ƒëi ƒë·∫øn trang n√†o c·ª• th·ªÉ?`
        };

        const response = navigationResponses[intent as keyof typeof navigationResponses] || 
                        navigationResponses.navigate_general;

        // Add navigation action for specific navigation intents
        const navigationAction = intent === 'navigate_home' ? '/' :
                               intent === 'navigate_about' ? '/about' :
                               intent === 'navigate_projects' ? '/projects' :
                               intent === 'navigate_blog' ? '/blog' :
                               intent === 'navigate_contact' ? '/contact' : null;

        return {
          response,
          source: 'navigation_direct',
          confidence: 0.95,
          navigationAction
        };
      }

      // Handle theme intents directly
      if (intent.startsWith('theme_')) {
        const themeResponses = {
          theme_dark: `üåô **Dark mode ƒë√£ ƒë∆∞·ª£c b·∫≠t!**

‚úÖ **Thay ƒë·ªïi:**
‚Ä¢ Giao di·ªán chuy·ªÉn sang ch·∫ø ƒë·ªô t·ªëi
‚Ä¢ D·ªÖ nh√¨n h∆°n trong m√¥i tr∆∞·ªùng √≠t √°nh s√°ng
‚Ä¢ Ti·∫øt ki·ªám pin cho thi·∫øt b·ªã OLED
‚Ä¢ Gi·∫£m cƒÉng th·∫≥ng cho m·∫Øt khi l√†m vi·ªác ban ƒë√™m

üé® **Dark mode features:**
‚Ä¢ High contrast cho readability t·ªët h∆°n
‚Ä¢ Consistent color scheme tr√™n to√†n site
‚Ä¢ Smooth transition animation
‚Ä¢ Auto-save preference cho l·∫ßn sau`,

          theme_light: `‚òÄÔ∏è **Light mode ƒë√£ ƒë∆∞·ª£c b·∫≠t!**

‚úÖ **Thay ƒë·ªïi:**
‚Ä¢ Giao di·ªán chuy·ªÉn sang ch·∫ø ƒë·ªô s√°ng
‚Ä¢ R√µ r√†ng v√† s√°ng s·ªßa
‚Ä¢ Ph√π h·ª£p cho m√¥i tr∆∞·ªùng c√≥ √°nh s√°ng t·ªët
‚Ä¢ Classic v√† professional appearance

üé® **Light mode features:**
‚Ä¢ Clean v√† minimalist design
‚Ä¢ Excellent readability ban ng√†y
‚Ä¢ High contrast text v√† backgrounds
‚Ä¢ Professional look cho business context`,

          theme_system: `üîÑ **System theme ƒë√£ ƒë∆∞·ª£c b·∫≠t!**

‚úÖ **Thay ƒë·ªïi:**
‚Ä¢ Theme s·∫Ω theo setting h·ªá th·ªëng c·ªßa b·∫°n
‚Ä¢ T·ª± ƒë·ªông chuy·ªÉn dark/light theo OS
‚Ä¢ Sync v·ªõi Windows/Mac/Linux preference
‚Ä¢ Smart adaptation theo th·ªùi gian trong ng√†y

üé® **Auto theme features:**
‚Ä¢ Seamless switching v·ªõi OS changes
‚Ä¢ Respect user system preferences
‚Ä¢ No manual intervention needed
‚Ä¢ Consistent experience across devices`,

          theme_usage: `üåô **C√°ch chuy·ªÉn ƒë·ªïi Theme:**

**Dark/Light Mode:**
‚Ä¢ Click icon üåô/‚òÄÔ∏è ·ªü g√≥c tr√™n b√™n ph·∫£i
‚Ä¢ Theme s·∫Ω chuy·ªÉn ngay l·∫≠p t·ª©c
‚Ä¢ Setting ƒë∆∞·ª£c l∆∞u t·ª± ƒë·ªông
‚Ä¢ Sync v·ªõi system preference

**L·ª£i √≠ch:**
‚Ä¢ **Dark mode**: d·ªÖ nh√¨n ban ƒë√™m, ti·∫øt ki·ªám pin
‚Ä¢ **Light mode**: s√°ng s·ªßa, ph√π h·ª£p ban ng√†y
‚Ä¢ **Auto**: theo setting h·ªá th·ªëng

**Responsive:**
‚Ä¢ Theme ho·∫°t ƒë·ªông tr√™n m·ªçi thi·∫øt b·ªã
‚Ä¢ Smooth transition animation
‚Ä¢ Kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn performance`
        };

        const response = themeResponses[intent as keyof typeof themeResponses] || 
                        themeResponses.theme_usage;

        // Add theme action for specific theme intents
        const themeAction = intent === 'theme_dark' ? 'dark' :
                          intent === 'theme_light' ? 'light' :
                          intent === 'theme_system' ? 'system' : null;

        return {
          response,
          source: 'theme_direct',
          confidence: 0.95,
          themeAction
        };
      }

      // Check cache first for non-theme intents
      const cachedResponse = ChatbotCache.getCachedResponse(userMessage, intent);
      if (cachedResponse && cachedResponse.confidence > 0.8) {
        return cachedResponse;
      }

      // --- Dynamic owner name for about/greeting/help intents ---
      if (["about", "greeting", "help"].includes(intent)) {
        let realBaseUrl = baseUrl;
        if (process.env.NODE_ENV === 'production') {
          realBaseUrl = 'https://portfolio-thacjs-projects.vercel.app';
        }
        // Fetch owner info from about API
        try {
          const aboutRes = await fetch(`${realBaseUrl}/api/chatbot/about?query=${encodeURIComponent(userMessage)}`);
          if (aboutRes.ok) {
            const aboutData = await aboutRes.json();
            const ownerName = aboutData.response.match(/\*\*T√™n:\*\* ([^\-\n]+)/)?.[1]?.trim() || 'Portfolio Owner';
            let response = aboutData.response;
            // For greeting/help, customize the message
            if (intent === 'greeting') {
              response = `Xin ch√†o! üëã T√¥i l√† tr·ª£ l√Ω AI c·ªßa ${ownerName}. H·ªèi t√¥i v·ªÅ d·ª± √°n, k·ªπ nƒÉng, kinh nghi·ªám, blog ho·∫∑c li√™n h·ªá nh√©!`;
            } else if (intent === 'help') {
              response = `üí° T√¥i l√† tr·ª£ l√Ω AI c·ªßa ${ownerName}. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªÅ: d·ª± √°n, k·ªπ nƒÉng, kinh nghi·ªám, blog, ho·∫∑c th√¥ng tin li√™n h·ªá. B·∫°n mu·ªën bi·∫øt g√¨?`;
            }
            const result = {
              response,
              intent,
              source: 'about_service',
              confidence: 0.95
            };
            ChatbotCache.cacheResponse(userMessage, intent, result, 0.95);
            return result;
          }
        } catch (err) {
          // fallback to static response below
        }
      }
      // Get service endpoint for the intent
      const endpoint = this.INTENT_SERVICE_MAP[intent] || this.INTENT_SERVICE_MAP['default'];
      // S·ª≠ d·ª•ng ƒë√∫ng domain production khi deploy tr√™n Vercel
      let realBaseUrl = baseUrl;
      if (process.env.NODE_ENV === 'production') {
        realBaseUrl = 'https://portfolio-thacjs-projects.vercel.app';
      }
      const serviceUrl = `${realBaseUrl}${endpoint}?query=${encodeURIComponent(userMessage)}`;
      
      // Make request to the specific service
      if (serviceUrl) {
        const startTime = Date.now();
        const response = await fetch(serviceUrl);
        const responseTime = Date.now() - startTime;
        if (response.ok) {
          let result;
          try {
            result = await response.json();
          } catch (jsonError) {
            // If response is not valid JSON (e.g. HTML error page), fallback gracefully
            console.error('Intent routing error: Invalid JSON from service', jsonError);
            return {
              response: "Xin l·ªói, t√¥i g·∫∑p l·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ d·ªãch v·ª•. H√£y th·ª≠ l·∫°i ho·∫∑c h·ªèi theo c√°ch kh√°c!",
              intent: 'error',
              source: 'router_error',
              confidence: 0.1
            };
          }
          const finalResult = {
            response: result.response,
            intent: result.intent,
            source: result.source,
            confidence: 0.9,
            responseTime
          };
          // Cache the successful response
          ChatbotCache.cacheResponse(userMessage, intent, finalResult, 0.9);
          return finalResult;
        }
      }
      
      // Fallback response
      const fallbackResponse = this.FALLBACK_RESPONSES[
        Math.floor(Math.random() * this.FALLBACK_RESPONSES.length)
      ];
      
      const fallbackResult = {
        response: fallbackResponse,
        intent: 'fallback',
        source: 'router_fallback', 
        confidence: 0.3
      };
      
      // Cache fallback with lower confidence
      ChatbotCache.cacheResponse(userMessage, 'fallback', fallbackResult, 0.3);
      
      return fallbackResult;
      
    } catch (error) {
      console.error('Intent routing error:', error);
      
      return {
        response: "Xin l·ªói, t√¥i g·∫∑p l·ªói khi x·ª≠ l√Ω c√¢u h·ªèi c·ªßa b·∫°n. H√£y th·ª≠ l·∫°i ho·∫∑c h·ªèi theo c√°ch kh√°c!",
        intent: 'error',
        source: 'router_error',
        confidence: 0.1
      };
    }
  }
  // Enhanced intent detection with multiple keywords
  static detectIntent(message: string): string {
    const lowerMessage = message.toLowerCase();
    
    // Theme switching commands - Highest priority
    if (this.matchKeywords(lowerMessage, [
      'b·∫≠t dark mode', 'turn on dark mode', 'enable dark mode', 'chuy·ªÉn sang dark',
      'switch to dark', 'ƒë·ªïi sang t·ªëi', 'set theme dark', 'dark theme',
      'set dark mode', 'activate dark'
    ])) {
      return 'theme_dark';
    }

    if (this.matchKeywords(lowerMessage, [
      'b·∫≠t light mode', 'turn on light mode', 'enable light mode', 'chuy·ªÉn sang light',
      'switch to light', 'ƒë·ªïi sang s√°ng', 'set theme light', 'light theme',
      'ch·∫ø ƒë·ªô s√°ng', 'set light mode', 'activate light'
    ])) {
      return 'theme_light';
    }

    if (this.matchKeywords(lowerMessage, [
      'system theme', 'auto theme', 'ch·∫ø ƒë·ªô t·ª± ƒë·ªông', 'theo h·ªá th·ªëng',
      'system mode', 'set theme system', 'set system mode', 'auto mode'
    ])) {
      return 'theme_system';
    }    // Theme general usage - Lower priority
    if (this.matchKeywords(lowerMessage, [
      'dark mode', 'light mode', 'theme', 'ch·∫ø ƒë·ªô t·ªëi', 'ch·∫ø ƒë·ªô s√°ng', 'giao di·ªán',
      'm√†u s·∫Øc', 'color', 'switch theme', 'ƒë·ªïi theme', 'appearance'
    ])) {
      return 'theme_usage';
    }
      // Navigation commands - High priority after theme
    if (this.matchKeywords(lowerMessage, [
      'ƒëi t·ªõi trang ch·ªß', 'go to home', 'navigate to home', 't·ªõi trang ch·ªß', 'ƒëi t·ªõi Home', 'ƒëi t·ªõi home', 'ƒëi t·ªõi trang Home', 'ƒëi t·ªõi trang home','chuy·ªÉn t·ªõi trang ch·ªß',
      'v√†o trang ch·ªß', 'm·ªü trang ch·ªß', 'm·ªü trang Home','direct to home', 'home page'
    ]) || lowerMessage === 'trang ch·ªß') {
      return 'navigate_home';
    }

    if (this.matchKeywords(lowerMessage, [
      'ƒëi t·ªõi about', 'ƒëi t·ªõi About', 'ƒëi t·ªõi trang about', 'ƒëi t·ªõi trang About','go to about', 'navigate to about', 'chuy·ªÉn t·ªõi about',
      'v√†o trang about', 'm·ªü about', 'about page', 'gi·ªõi thi·ªáu page'
    ])) {
      return 'navigate_about';
    }

    if (this.matchKeywords(lowerMessage, [
      'ƒëi t·ªõi projects', 'go to projects', 'navigate to projects', 'chuy·ªÉn t·ªõi projects',
      'v√†o trang projects', 'm·ªü projects', 'project page', 'd·ª± √°n page'
    ])) {
      return 'navigate_projects';
    }

    if (this.matchKeywords(lowerMessage, [
      'ƒëi t·ªõi blog', 'go to blog', 'navigate to blog', 'chuy·ªÉn t·ªõi blog',
      'v√†o trang blog', 'm·ªü blog', 'blog page', 'b√†i vi·∫øt page'
    ])) {
      return 'navigate_blog';
    }

    if (this.matchKeywords(lowerMessage, [
      'ƒëi t·ªõi contact', 'go to contact', 'navigate to contact', 'chuy·ªÉn t·ªõi contact',
      'v√†o trang contact', 't·ªõi trang contact','m·ªü contact', 'contact page', 'li√™n h·ªá page'
    ])) {
      return 'navigate_contact';
    }

    // General navigation detection - must be more specific
    if (this.matchKeywords(lowerMessage, [
      'ƒëi t·ªõi', 'go to', 'navigate to', 'chuy·ªÉn t·ªõi', 'v√†o trang', 'm·ªü trang',
      'direct to', 'visit', 'h∆∞·ªõng d·∫´n t·ªõi', 'd·∫´n t·ªõi'
    ]) && !this.matchKeywords(lowerMessage, ['d·ª± √°n', 'project', 'blog', 'about', 'contact', 'home'])) {
      return 'navigate_general';
    }
    
    // Enhanced blog detection - CHECK FIRST for better priority
    if (this.matchKeywords(lowerMessage, [
      'blog', 'b√†i vi·∫øt', 'article', 'post', 'tutorial', 'h∆∞·ªõng d·∫´n',
      'content', 'ƒë·ªçc', 'vi·∫øt', 'learning', 'study', 'technical blog',
      'write', 'author', 'publish', 'documentation', 'guide', 'tips',
      'insights', 'sharing', 'knowledge', 'experience sharing',
      'react best practices', 'nextjs', 'typescript', 'ai chatbot',
      'what do you write', 'writing approach', 'blog v·ªÅ', 'vi·∫øt g√¨ v·ªÅ',
      'best practices', 'features', 'advanced', 'development', 'career tips',
      'web performance', 'optimization', 'responsive design', 'docker'
    ])) {
      return 'blog';
    }

    // Enhanced contact detection - CHECK EARLY to prioritize contact keywords
    if (this.matchKeywords(lowerMessage, [
      'li√™n h·ªá', 'contact', 'email', 'mail', 'phone', 'ƒëi·ªán tho·∫°i', 'th√¥ng tin li√™n l·∫°c',
      'communicate', 'communication', 'giao ti·∫øp', 'reach', 'get in touch',
      'connect', 'k·∫øt n·ªëi', 'hire', 'thu√™', 'work together', 'collaboration',
      'prefer to communicate', 'how to contact', 'ways to reach', 'what\'s your email',
      'your email', 'email address', 'ƒë·ªãa ch·ªâ email'
    ])) {
      return 'contact';
    }
    
    // Enhanced project detection
    if (this.matchKeywords(lowerMessage, [
      'd·ª± √°n', 'project', 'portfolio', 'work', 'demo', 'github', 'source code',
      '·ª©ng d·ª•ng', 'website', 'app', 'l√†m g√¨', 'build', 'ph√°t tri·ªÉn', 'technology',
      'repository', 'repo', 'code', 'show me', 'best project'
    ])) {
      return 'projects';
    }

    // Enhanced skills detection
    if (this.matchKeywords(lowerMessage, [
      'k·ªπ nƒÉng', 'skill', 'technology', 'programming', 'coding', 'development',
      'frontend', 'backend', 'fullstack', 'react', 'node', 'javascript', 'typescript'
    ])) {
      return 'skills';
    }

    // Enhanced about detection  
    if (this.matchKeywords(lowerMessage, [
      'gi·ªõi thi·ªáu', 'about', 'background', 'experience', 'kinh nghi·ªám', 'education',
      'h·ªçc v·∫•n', 'career', 'ngh·ªÅ nghi·ªáp', 'b·∫£n th√¢n', 'ai', 'who', 't√¥i l√† ai',
      'yourself', 'values', 'gi√° tr·ªã', 'principles', 'philosophy', 'motivation',
      'passion', 'ƒëam m√™', 'goals', 'm·ª•c ti√™u', 'vision', 't·∫ßm nh√¨n'
    ])) {
      return 'about';
    }

    // Greeting detection
    if (this.matchKeywords(lowerMessage, [
      'hello', 'hi', 'ch√†o', 'xin ch√†o', 'hey', 'good morning', 'good afternoon'
    ])) {
      return 'greeting';
    }

    // Help detection
    if (this.matchKeywords(lowerMessage, [
      'help', 'gi√∫p', 'h·ªó tr·ª£', 'support', 'assistance'
    ])) {
      return 'help';
    }

    return 'default';
  }

  // Helper method to match keywords (case-insensitive, accent-insensitive)
  private static matchKeywords(message: string, keywords: string[]): boolean {
    // Normalize message: lowercase and remove accents
    const normalizedMsg = this.normalizeText(message);
    return keywords.some(keyword => normalizedMsg.includes(this.normalizeText(keyword)));
  }

  // Helper to normalize text: lowercase and remove accents for robust matching
  private static normalizeText(text: string): string {
    return text
      .toLowerCase()
      .normalize('NFD')
      .replace(/\p{Diacritic}/gu, '');
  }

  // Get available intents for help responses
  static getAvailableIntents(): string[] {
    return Object.keys(this.INTENT_SERVICE_MAP);
  }

  // Get service endpoint for intent
  static getServiceEndpoint(intent: string): string | null {
    return this.INTENT_SERVICE_MAP[intent] || null;
  }

  // Validate intent exists
  static isValidIntent(intent: string): boolean {
    return intent in this.INTENT_SERVICE_MAP;
  }
}

// Enhanced greeting responses
export const GREETING_RESPONSES = [
  "Xin ch√†o! üëã T√¥i l√† AI assistant c·ªßa portfolio n√†y. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ projects, skills, experience, blog posts v√† contact information!",
  "Hi there! üåü Welcome to my portfolio! Ask me anything about my work, technical skills, background, recent blogs, or how to get in touch!",
  "Ch√†o b·∫°n! üöÄ T√¥i s·∫µn s√†ng tr·∫£ l·ªùi m·ªçi c√¢u h·ªèi v·ªÅ portfolio, d·ª± √°n, k·ªπ nƒÉng, kinh nghi·ªám v√† th√¥ng tin li√™n h·ªá!",
  "Hello! üíª I'm here to help you explore this portfolio. Feel free to ask about projects, technical expertise, career journey, blog content, or contact details!"
];

export const HELP_RESPONSES = [
  "üîç **T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªÅ:**\n‚Ä¢ üöÄ **Projects** - D·ª± √°n v√† ·ª©ng d·ª•ng ƒë√£ th·ª±c hi·ªán\n‚Ä¢ üíª **Skills** - K·ªπ nƒÉng technical v√† c√¥ng ngh·ªá\n‚Ä¢ üë®‚Äçüíª **About** - Background, experience, education\n‚Ä¢ üìù **Blog** - B√†i vi·∫øt, tutorials v√† insights\n‚Ä¢ üìß **Contact** - Th√¥ng tin li√™n h·ªá v√† collaboration",
  "üí° **I can help you with:**\n‚Ä¢ üéØ **Projects** - Portfolio work v√† applications\n‚Ä¢ üõ†Ô∏è **Technical Skills** - Programming languages v√† frameworks\n‚Ä¢ üìã **Experience** - Work history v√† achievements\n‚Ä¢ ‚úçÔ∏è **Blog Posts** - Technical articles v√† tutorials\n‚Ä¢ ü§ù **Contact Info** - Ways to connect v√† collaborate"
];

export default ChatbotIntentRouter;
