import { NextResponse } from 'next/server';
import { prisma } from '@/lib/db';

// 100+ Project-related prompts organized by categories
const PROJECT_PROMPTS = {
  // Specific Project Details (1-50)
  specific_projects: [
    // Portfolio Website Project
    { q: "portfolio website", a: "üåü **Portfolio Website with AI Chatbot**\n\n**M√¥ t·∫£:** Website portfolio c√° nh√¢n v·ªõi AI chatbot th√¥ng minh t√≠ch h·ª£p\n\nüîß **Tech Stack:**\n‚Ä¢ Frontend: Next.js 15, React, TypeScript, Tailwind CSS\n‚Ä¢ Backend: Node.js, PostgreSQL, Prisma ORM\n‚Ä¢ AI: Custom NLP, Machine Learning algorithms\n‚Ä¢ Deploy: Vercel, Docker\n\n‚ú® **Features:**\n‚Ä¢ AI Chatbot v·ªõi learning capabilities\n‚Ä¢ Admin dashboard qu·∫£n l√Ω content\n‚Ä¢ Blog system v·ªõi markdown support\n‚Ä¢ Responsive design cho m·ªçi device\n‚Ä¢ Real-time chat v·ªõi database storage\n‚Ä¢ Performance optimization\n\nüéØ **Highlights:** ƒê√¢y l√† d·ª± √°n showcase comprehensive full-stack skills v·ªõi AI integration!" },
    
    { q: "weather dashboard", a: "üå§Ô∏è **Weather Dashboard Application**\n\n**M√¥ t·∫£:** ·ª®ng d·ª•ng th·ªùi ti·∫øt real-time v·ªõi charts v√† forecasting\n\nüîß **Tech Stack:**\n‚Ä¢ Frontend: React, Chart.js, Styled Components\n‚Ä¢ API: OpenWeatherMap API, geolocation API\n‚Ä¢ State: Redux Toolkit\n‚Ä¢ Tools: Axios, Moment.js\n\n‚ú® **Features:**\n‚Ä¢ Real-time weather data cho multiple cities\n‚Ä¢ 7-day weather forecast\n‚Ä¢ Interactive weather charts\n‚Ä¢ Geolocation-based weather\n‚Ä¢ Favorite cities management\n‚Ä¢ Responsive mobile design\n‚Ä¢ Dark/Light theme toggle\n\nüéØ **Challenges:** API integration, data visualization, performance optimization v·ªõi large datasets" },
    
    { q: "e-commerce platform", a: "üõí **E-commerce Platform**\n\n**M√¥ t·∫£:** Full-stack e-commerce solution v·ªõi payment integration\n\nüîß **Tech Stack:**\n‚Ä¢ Frontend: Next.js, TypeScript, Tailwind CSS\n‚Ä¢ Backend: Node.js, Express, MongoDB\n‚Ä¢ Payment: Stripe API\n‚Ä¢ Auth: JWT, bcrypt\n‚Ä¢ Deploy: AWS EC2, S3\n\n‚ú® **Features:**\n‚Ä¢ Product catalog v·ªõi search v√† filtering\n‚Ä¢ Shopping cart v√† checkout process\n‚Ä¢ User authentication v√† profiles\n‚Ä¢ Admin dashboard cho inventory management\n‚Ä¢ Order tracking system\n‚Ä¢ Payment processing v·ªõi Stripe\n‚Ä¢ Email notifications\n‚Ä¢ Reviews v√† ratings system\n\nüéØ **Learning:** Payment integration, security best practices, scalable architecture" },
    
    { q: "task management app", a: "üìã **Task Management Application**\n\n**M√¥ t·∫£:** Productivity app v·ªõi team collaboration features\n\nüîß **Tech Stack:**\n‚Ä¢ Frontend: React, Material-UI, Framer Motion\n‚Ä¢ Backend: Node.js, GraphQL, PostgreSQL\n‚Ä¢ Real-time: Socket.io\n‚Ä¢ State: Apollo Client\n\n‚ú® **Features:**\n‚Ä¢ Drag-and-drop task boards (Kanban style)\n‚Ä¢ Team collaboration v·ªõi real-time updates\n‚Ä¢ Task assignment v√† deadline tracking\n‚Ä¢ File attachments v√† comments\n‚Ä¢ Time tracking functionality\n‚Ä¢ Project analytics v√† reporting\n‚Ä¢ Mobile-responsive design\n‚Ä¢ Offline capability v·ªõi sync\n\nüéØ **Innovation:** Real-time collaboration, intuitive UX/UI, performance optimization" },
    
    { q: "social media app", a: "üì± **Social Media Application**\n\n**M√¥ t·∫£:** Social platform v·ªõi real-time messaging v√† content sharing\n\nüîß **Tech Stack:**\n‚Ä¢ Frontend: React Native, Expo\n‚Ä¢ Backend: Node.js, Socket.io, Redis\n‚Ä¢ Database: MongoDB, Cloudinary\n‚Ä¢ Real-time: WebSocket connections\n\n‚ú® **Features:**\n‚Ä¢ User profiles v·ªõi photo/video sharing\n‚Ä¢ Real-time messaging v√† group chats\n‚Ä¢ News feed v·ªõi like, comment, share\n‚Ä¢ Story features v·ªõi 24h expiry\n‚Ä¢ Push notifications\n‚Ä¢ Image/video upload v·ªõi optimization\n‚Ä¢ Follow/unfollow system\n‚Ä¢ Search users v√† content\n\nüéØ **Complexity:** Real-time features, media handling, scalable architecture cho nhi·ªÅu users" },
    
    { q: "blog platform", a: "‚úçÔ∏è **Blog Publishing Platform**\n\n**M√¥ t·∫£:** CMS platform cho bloggers v·ªõi advanced features\n\nüîß **Tech Stack:**\n‚Ä¢ Frontend: Next.js, MDX, Tailwind CSS\n‚Ä¢ Backend: Node.js, PostgreSQL\n‚Ä¢ Editor: Rich text editor v·ªõi markdown\n‚Ä¢ SEO: Next.js built-in optimization\n\n‚ú® **Features:**\n‚Ä¢ Rich text editor v·ªõi markdown support\n‚Ä¢ SEO optimization cho better ranking\n‚Ä¢ Comment system v·ªõi moderation\n‚Ä¢ Tag v√† category management\n‚Ä¢ Author profiles v√† multi-author support\n‚Ä¢ Newsletter subscription\n‚Ä¢ Analytics dashboard\n‚Ä¢ Social media integration\n\nüéØ **Focus:** Content management, SEO optimization, user experience cho both writers v√† readers" },
    
    { q: "cryptocurrency tracker", a: "üí∞ **Cryptocurrency Tracker**\n\n**M√¥ t·∫£:** Real-time crypto monitoring v·ªõi portfolio management\n\nüîß **Tech Stack:**\n‚Ä¢ Frontend: React, Chart.js, Styled Components\n‚Ä¢ API: CoinGecko API, WebSocket\n‚Ä¢ State: Context API, Local Storage\n‚Ä¢ Charts: TradingView widgets\n\n‚ú® **Features:**\n‚Ä¢ Real-time price tracking cho 1000+ cryptocurrencies\n‚Ä¢ Portfolio management v·ªõi P&L calculation\n‚Ä¢ Price alerts v√† notifications\n‚Ä¢ Historical data charts\n‚Ä¢ Market analysis tools\n‚Ä¢ News integration\n‚Ä¢ Watchlist functionality\n‚Ä¢ Mobile-responsive design\n\nüéØ **Challenges:** Real-time data handling, complex calculations, data visualization" },
    
    { q: "recipe app", a: "üë®‚Äçüç≥ **Recipe Sharing Application**\n\n**M√¥ t·∫£:** Platform chia s·∫ª c√¥ng th·ª©c n·∫•u ƒÉn v·ªõi community features\n\nüîß **Tech Stack:**\n‚Ä¢ Frontend: React, Material-UI\n‚Ä¢ Backend: Node.js, Express, MongoDB\n‚Ä¢ Image: Cloudinary integration\n‚Ä¢ Search: Elasticsearch\n\n‚ú® **Features:**\n‚Ä¢ Recipe creation v·ªõi photo upload\n‚Ä¢ Advanced search v·ªõi ingredients, cuisine, difficulty\n‚Ä¢ Rating v√† review system\n‚Ä¢ Meal planning calendar\n‚Ä¢ Shopping list generator\n‚Ä¢ Nutrition information\n‚Ä¢ Social features: follow chefs, share recipes\n‚Ä¢ Recipe collections v√† favorites\n\nüéØ **Innovation:** Smart search algorithms, user-generated content management, community building" },
    
    { q: "fitness tracker", a: "üí™ **Fitness Tracking Application**\n\n**M√¥ t·∫£:** Health v√† fitness monitoring v·ªõi workout planning\n\nüîß **Tech Stack:**\n‚Ä¢ Frontend: React Native, NativeBase\n‚Ä¢ Backend: Node.js, PostgreSQL\n‚Ä¢ Charts: Victory Native\n‚Ä¢ Health: HealthKit/Google Fit integration\n\n‚ú® **Features:**\n‚Ä¢ Workout tracking v·ªõi exercise database\n‚Ä¢ Progress charts v√† analytics\n‚Ä¢ Meal logging v·ªõi calorie counting\n‚Ä¢ Goal setting v√† achievement tracking\n‚Ä¢ Social challenges v·ªõi friends\n‚Ä¢ Wearable device integration\n‚Ä¢ Custom workout plans\n‚Ä¢ Health data visualization\n\nüéØ **Learning:** Mobile development, health data integration, user motivation features" },
    
    { q: "music streaming app", a: "üéµ **Music Streaming Platform**\n\n**M√¥ t·∫£:** Music streaming service v·ªõi playlist management\n\nüîß **Tech Stack:**\n‚Ä¢ Frontend: React, Web Audio API\n‚Ä¢ Backend: Node.js, Express, AWS S3\n‚Ä¢ Database: MongoDB, Redis caching\n‚Ä¢ Real-time: Socket.io\n\n‚ú® **Features:**\n‚Ä¢ Music streaming v·ªõi high-quality audio\n‚Ä¢ Playlist creation v√† sharing\n‚Ä¢ Music discovery algorithms\n‚Ä¢ Offline download capability\n‚Ä¢ Social features: follow artists, share music\n‚Ä¢ Audio visualization\n‚Ä¢ Lyrics integration\n‚Ä¢ Cross-platform synchronization\n\nüéØ **Complexity:** Audio streaming optimization, recommendation algorithms, large-scale data handling" }  ],

  // General Projects Questions
  projects_general: [
    { q: "B·∫°n c√≥ nh·ªØng d·ª± √°n g√¨?", a: "T√¥i c√≥ nhi·ªÅu d·ª± √°n th√∫ v·ªã bao g·ªìm web applications, mobile apps, v√† c√°c tools h·ªØu √≠ch. B·∫°n mu·ªën xem d·ª± √°n n√†o c·ª• th·ªÉ?" },
    { q: "Show me your projects", a: "I have several exciting projects including full-stack web applications, AI-powered tools, and mobile applications. Which type interests you most?" },
    { q: "D·ª± √°n n√†o hay nh·∫•t?", a: "M·ªói d·ª± √°n ƒë·ªÅu c√≥ ƒëi·ªÉm m·∫°nh ri√™ng! Portfolio website n√†y showcase full-stack skills, trong khi AI chatbot demonstrate machine learning capabilities." },
    { q: "What's your best project?", a: "My portfolio website with AI chatbot is quite comprehensive, showcasing both technical skills and user experience design. Would you like to see the details?" },
    { q: "C√≥ bao nhi√™u d·ª± √°n?", a: "Hi·ªán t·∫°i t√¥i c√≥ kho·∫£ng 10+ d·ª± √°n ho√†n thi·ªán v√† ƒëang ph√°t tri·ªÉn th√™m. T·ª´ web apps ƒë·∫øn mobile apps v√† AI tools!" },
    { q: "How many projects do you have?", a: "I have 10+ completed projects and several in development, ranging from web applications to AI-powered tools and mobile apps." },
    { q: "D·ª± √°n m·ªõi nh·∫•t l√† g√¨?", a: "D·ª± √°n m·ªõi nh·∫•t l√† AI Portfolio Chatbot n√†y - m·ªôt chatbot th√¥ng minh c√≥ kh·∫£ nƒÉng h·ªçc h·ªèi v√† c·∫£i thi·ªán t·ª´ c√°c cu·ªôc h·ªôi tho·∫°i!" },
    { q: "What's your latest project?", a: "My latest project is this AI Portfolio Chatbot - an intelligent assistant that learns and improves from conversations!" },
    { q: "Portfolio website c√≥ g√¨ ƒë·∫∑c bi·ªát?", a: "Portfolio n√†y c√≥ AI chatbot t√≠ch h·ª£p, responsive design, admin dashboard, blog system, v√† learning capabilities!" },
    { q: "What makes your portfolio special?", a: "This portfolio features an AI chatbot, responsive design, admin dashboard, blog system, and self-learning capabilities!" },
    { q: "D·ª± √°n n√†o kh√≥ nh·∫•t?", a: "AI Chatbot v·ªõi learning system l√† th√°ch th·ª©c l·ªõn nh·∫•t - ph·∫£i implement natural language processing, machine learning, v√† database optimization." },
    { q: "Which project was most challenging?", a: "The AI Chatbot with learning system was the most challenging - implementing NLP, machine learning, and database optimization." },
    { q: "C√≥ l√†m d·ª± √°n nh√≥m kh√¥ng?", a: "C√≥! T√¥i ƒë√£ tham gia nhi·ªÅu d·ª± √°n nh√≥m, h·ªçc ƒë∆∞·ª£c collaboration, git workflow, v√† team communication skills." },
    { q: "Any team projects?", a: "Yes! I've participated in several team projects, learning collaboration, git workflow, and team communication skills." },
    { q: "D·ª± √°n n√†o ƒë∆∞·ª£c nhi·ªÅu ng∆∞·ªùi d√πng nh·∫•t?", a: "Portfolio website n√†y ƒëang ƒë∆∞·ª£c nhi·ªÅu recruiters v√† developers quan t√¢m, ƒë·∫∑c bi·ªát l√† t√≠nh nƒÉng AI chatbot!" },
    { q: "Which project has most users?", a: "This portfolio website is getting attention from recruiters and developers, especially the AI chatbot feature!" },
    { q: "C√≥ open source projects kh√¥ng?", a: "C√≥ nhi·ªÅu projects open source tr√™n GitHub! T√¥i tin v√†o vi·ªác sharing knowledge v√† contribute to community." },
    { q: "Any open source projects?", a: "Yes, many projects are open source on GitHub! I believe in sharing knowledge and contributing to the community." },
    { q: "D·ª± √°n c√≥ responsive design kh√¥ng?", a: "T·∫•t c·∫£ d·ª± √°n ƒë·ªÅu responsive v√† mobile-friendly! UX/UI lu√¥n l√† priority trong development process." },
    { q: "Are your projects responsive?", a: "All projects are responsive and mobile-friendly! UX/UI is always a priority in my development process." }
  ],

  // Technology Stack Questions
  techstack: [
    { q: "D√πng c√¥ng ngh·ªá g√¨?", a: "Tech stack ch√≠nh: React, Next.js, TypeScript, Node.js, PostgreSQL, Prisma, Tailwind CSS, v√† nhi·ªÅu tools kh√°c!" },
    { q: "What technologies do you use?", a: "Main tech stack: React, Next.js, TypeScript, Node.js, PostgreSQL, Prisma, Tailwind CSS, and many other tools!" },
    { q: "Frontend framework n√†o?", a: "Ch·ªß y·∫øu s·ª≠ d·ª•ng React v·ªõi Next.js cho SSR/SSG, TypeScript cho type safety, v√† Tailwind CSS cho styling." },
    { q: "What frontend frameworks?", a: "Primarily React with Next.js for SSR/SSG, TypeScript for type safety, and Tailwind CSS for styling." },
    { q: "Backend technology?", a: "Node.js v·ªõi Express/Next.js API routes, PostgreSQL database, Prisma ORM, v√† c√°c authentication systems." },
    { q: "Database n√†o?", a: "PostgreSQL cho production, v·ªõi Prisma ORM ƒë·ªÉ type-safe database queries v√† migrations." },
    { q: "What database?", a: "PostgreSQL for production, with Prisma ORM for type-safe database queries and migrations." },
    { q: "C√≥ d√πng cloud services?", a: "C√≥! AWS, Vercel, Netlify cho deployment, Cloudinary cho image management, v√† c√°c CDN services." },
    { q: "Any cloud services?", a: "Yes! AWS, Vercel, Netlify for deployment, Cloudinary for image management, and various CDN services." },
    { q: "Mobile development?", a: "React Native cho cross-platform mobile apps, c≈©ng c√≥ experience v·ªõi Flutter v√† native development." },
    { q: "UI/UX tools?", a: "Figma cho design, Tailwind CSS cho styling, Framer Motion cho animations, v√† nhi·ªÅu UI libraries." },
    { q: "Testing frameworks?", a: "Jest, React Testing Library, Cypress cho E2E testing, v√† Postman cho API testing." },
    { q: "DevOps tools?", a: "Docker cho containerization, GitHub Actions cho CI/CD, v√† various monitoring tools." },
    { q: "Version control?", a: "Git v·ªõi GitHub/GitLab, follow gitflow workflow, v√† c√≥ experience v·ªõi collaborative development." },
    { q: "API development?", a: "RESTful APIs v·ªõi Express/Next.js, GraphQL, webhook integrations, v√† API documentation." },
    { q: "State management?", a: "Redux Toolkit, Zustand, React Context, v√† server state v·ªõi React Query/SWR." },
    { q: "CSS frameworks?", a: "Tailwind CSS primarily, c≈©ng c√≥ experience v·ªõi Bootstrap, Material-UI, v√† custom CSS." },
    { q: "Build tools?", a: "Webpack, Vite, Next.js built-in bundling, v√† various optimization tools." },
    { q: "Authentication?", a: "NextAuth.js, JWT tokens, OAuth integrations, v√† secure session management." },
    { q: "Performance optimization?", a: "Code splitting, lazy loading, image optimization, caching strategies, v√† performance monitoring." }
  ],

  // GitHub & Source Code Questions
  github: [
    { q: "GitHub profile?", a: "B·∫°n c√≥ th·ªÉ xem t·∫•t c·∫£ projects tr√™n GitHub c·ªßa t√¥i! C√≥ nhi·ªÅu open source projects v√† contributions." },
    { q: "Source code available?", a: "Most projects have source code available on GitHub! I believe in open source and knowledge sharing." },
    { q: "Can I see the code?", a: "Absolutely! Check out my GitHub repositories for detailed code examples and documentation." },
    { q: "GitHub contributions?", a: "I'm actively contributing to open source projects and maintaining my own repositories with regular commits." },
    { q: "Code quality?", a: "I follow best practices: clean code, proper documentation, testing, and code reviews." },
    { q: "Repository organization?", a: "Repos are well-organized with README files, proper folder structure, and clear documentation." },
    { q: "Collaboration experience?", a: "Extensive experience with pull requests, code reviews, issue management, v√† team workflows." },
    { q: "Git workflow?", a: "Follow gitflow methodology v·ªõi feature branches, proper commit messages, v√† merge strategies." },
    { q: "Documentation?", a: "Comprehensive documentation in README files, inline comments, v√† API documentation." },
    { q: "Code reviews?", a: "Regular code reviews for quality assurance, knowledge sharing, v√† maintaining standards." },
    { q: "Issue tracking?", a: "Use GitHub Issues for bug tracking, feature requests, v√† project management." },
    { q: "Deployment from GitHub?", a: "CI/CD pipelines with GitHub Actions for automated testing v√† deployment." },
    { q: "License usage?", a: "Proper licensing for open source projects, usually MIT or Apache licenses." },
    { q: "Fork contributions?", a: "Active in forking v√† contributing to other open source projects." },
    { q: "Repository maintenance?", a: "Regular updates, dependency management, security patches, v√† feature additions." },
    { q: "Branch management?", a: "Proper branch naming conventions, feature branches, v√† clean merge history." },
    { q: "Commit messages?", a: "Descriptive commit messages following conventional commit format." },
    { q: "GitHub Pages?", a: "Some projects deployed on GitHub Pages for easy demonstration v√† testing." },
    { q: "Repository templates?", a: "Created reusable templates for quick project setup v√† best practices." },
    { q: "GitHub stars?", a: "Several repositories have received stars v√† positive feedback from community." }
  ],

  // Demo & Live Projects Questions
  demo: [
    { q: "C√≥ demo live kh√¥ng?", a: "C√≥! Portfolio n√†y ch√≠nh l√† demo live, b·∫°n ƒëang t∆∞∆°ng t√°c v·ªõi AI chatbot real-time!" },
    { q: "Can I see live demo?", a: "Yes! This portfolio is a live demo, you're interacting with the AI chatbot in real-time!" },
    { q: "Live website?", a: "Portfolio website n√†y ƒëang live, v·ªõi ƒë·∫ßy ƒë·ªß features: chatbot, blog, admin dashboard!" },
    { q: "Working examples?", a: "All projects have working examples - t·ª´ simple web apps ƒë·∫øn complex AI systems!" },
    { q: "Demo environment?", a: "Demo environments available for testing without affecting production data." },
    { q: "Test the features?", a: "Feel free to test all features! Chat with AI, browse projects, read blog posts!" },
    { q: "Interactive demo?", a: "This chatbot is interactive demo - ask questions v√† see AI responses in real-time!" },
    { q: "Mobile demo?", a: "Portfolio is mobile-responsive, try accessing on different devices!" },
    { q: "Performance demo?", a: "Notice the fast loading times v√† smooth interactions - optimized for performance!" },
    { q: "Feature showcase?", a: "Every feature is showcased: responsive design, AI chat, admin panel, blog system!" },
    { q: "Real-time features?", a: "AI chatbot provides real-time responses v·ªõi learning capabilities!" },
    { q: "Demo data?", a: "Using real portfolio data v·ªõi sample projects v√† blog posts for authentic experience." },
    { q: "User experience demo?", a: "Navigate through different sections to experience the full UX/UI design!" },
    { q: "API demo?", a: "APIs powering this chatbot v√† other features are working live!" },
    { q: "Database demo?", a: "Real database operations - messages are saved v√† chatbot learns from interactions!" },
    { q: "Responsive demo?", a: "Try resizing browser window to see responsive design in action!" },
    { q: "Speed demo?", a: "Notice the fast page loads thanks to Next.js optimization v√† performance tuning!" },
    { q: "Search demo?", a: "Use the search functionality to find specific projects or blog posts!" },
    { q: "Admin demo?", a: "Admin dashboard available for content management (restricted access)." },
    { q: "Integration demo?", a: "Various integrations working: email, social media, analytics, monitoring!" }
  ],

  // Project Details Questions
  project_details: [
    { q: "Chi ti·∫øt d·ª± √°n?", a: "M·ªói d·ª± √°n c√≥ detailed documentation, tech stack, features, v√† learning outcomes!" },
    { q: "Project architecture?", a: "Follow modern architecture patterns: component-based, modular design, clean code principles!" },
    { q: "Development process?", a: "Agile methodology v·ªõi planning, development, testing, deployment, v√† iteration phases!" },
    { q: "Project timeline?", a: "Typical project timeline: 2-8 weeks depending on complexity v√† scope." },
    { q: "Team size?", a: "Solo projects v√† team projects with 2-5 members, each with defined roles." },
    { q: "Budget considerations?", a: "Cost-effective solutions using free/open source tools where possible." },
    { q: "Scalability?", a: "Projects designed for scalability v·ªõi proper architecture v√† optimization." },
    { q: "Security measures?", a: "Security best practices: authentication, authorization, data encryption, input validation!" },
    { q: "Testing approach?", a: "Comprehensive testing: unit tests, integration tests, E2E testing, user acceptance testing!" },
    { q: "Deployment strategy?", a: "Modern deployment: CI/CD pipelines, containerization, cloud hosting, monitoring!" },
    { q: "User feedback?", a: "Positive user feedback highlighting usability, performance, v√† feature completeness!" },
    { q: "Lessons learned?", a: "Each project teaches new skills: technical knowledge, problem-solving, user experience!" },
    { q: "Future improvements?", a: "Continuous improvement plans: new features, performance optimization, user experience!" },
    { q: "Maintenance plan?", a: "Regular maintenance: updates, security patches, feature additions, bug fixes!" },
    { q: "Documentation quality?", a: "Comprehensive documentation: technical specs, user guides, API documentation!" },
    { q: "Code structure?", a: "Clean, modular code structure with proper separation of concerns!" },
    { q: "Error handling?", a: "Robust error handling v·ªõi user-friendly messages v√† logging for debugging!" },
    { q: "Performance metrics?", a: "Great performance metrics: fast loading, smooth interactions, efficient queries!" },
    { q: "Browser compatibility?", a: "Cross-browser compatibility ensuring consistent experience across platforms!" },    { q: "Accessibility features?", a: "Accessibility considerations: keyboard navigation, screen reader support, WCAG compliance!" }
  ]
};

// Get projects from database
async function getProjects() {
  try {
    return await prisma.project.findMany({
      orderBy: { createdAt: 'desc' },
      take: 10
    });
  } catch (error) {
    console.error('Error fetching projects:', error);
    return [];
  }
}

// Enhanced intent detection for projects
function detectProjectIntent(query: string): string {
  const lowerQuery = query.toLowerCase();
  
  // Check for specific project names
  if (lowerQuery.includes('portfolio') || lowerQuery.includes('website') || lowerQuery.includes('chatbot')) {
    return 'specific_projects';
  }
  if (lowerQuery.includes('weather') || lowerQuery.includes('th·ªùi ti·∫øt')) {
    return 'specific_projects';
  }
  if (lowerQuery.includes('e-commerce') || lowerQuery.includes('shop') || lowerQuery.includes('b√°n h√†ng')) {
    return 'specific_projects';
  }
  if (lowerQuery.includes('task') || lowerQuery.includes('todo') || lowerQuery.includes('c√¥ng vi·ªác')) {
    return 'specific_projects';
  }
  if (lowerQuery.includes('social media') || lowerQuery.includes('m·∫°ng x√£ h·ªôi')) {
    return 'specific_projects';
  }
  if (lowerQuery.includes('blog') || lowerQuery.includes('vi·∫øt')) {
    return 'specific_projects';
  }
  if (lowerQuery.includes('crypto') || lowerQuery.includes('bitcoin') || lowerQuery.includes('ti·ªÅn ·∫£o')) {
    return 'specific_projects';
  }
  if (lowerQuery.includes('recipe') || lowerQuery.includes('m√≥n ƒÉn') || lowerQuery.includes('n·∫•u ƒÉn')) {
    return 'specific_projects';
  }
  if (lowerQuery.includes('fitness') || lowerQuery.includes('gym') || lowerQuery.includes('t·∫≠p gym')) {
    return 'specific_projects';
  }
  if (lowerQuery.includes('music') || lowerQuery.includes('nh·∫°c') || lowerQuery.includes('streaming')) {
    return 'specific_projects';
  }
  
  if (lowerQuery.includes('demo') || lowerQuery.includes('live') || lowerQuery.includes('xem')) {
    return 'demo';
  }
  if (lowerQuery.includes('github') || lowerQuery.includes('source') || lowerQuery.includes('code')) {
    return 'github';
  }
  if (lowerQuery.includes('tech') || lowerQuery.includes('c√¥ng ngh·ªá') || lowerQuery.includes('framework')) {
    return 'techstack';
  }
  if (lowerQuery.includes('chi ti·∫øt') || lowerQuery.includes('detail') || lowerQuery.includes('architecture')) {
    return 'project_details';
  }
  
  return 'projects_general';
}

// Find best matching response for specific projects
function findSpecificProjectResponse(query: string): string {
  const lowerQuery = query.toLowerCase();
  
  // Portfolio/Website/Chatbot
  if (lowerQuery.includes('portfolio') || lowerQuery.includes('website') || lowerQuery.includes('chatbot')) {
    return PROJECT_PROMPTS.specific_projects.find(p => p.q.includes('portfolio website'))?.a || "Portfolio project info not found";
  }
  
  // Weather Dashboard
  if (lowerQuery.includes('weather') || lowerQuery.includes('th·ªùi ti·∫øt')) {
    return PROJECT_PROMPTS.specific_projects.find(p => p.q.includes('weather dashboard'))?.a || "Weather dashboard project info not found";
  }
  
  // E-commerce
  if (lowerQuery.includes('e-commerce') || lowerQuery.includes('shop') || lowerQuery.includes('b√°n h√†ng')) {
    return PROJECT_PROMPTS.specific_projects.find(p => p.q.includes('e-commerce platform'))?.a || "E-commerce project info not found";
  }
  
  // Task Management
  if (lowerQuery.includes('task') || lowerQuery.includes('todo') || lowerQuery.includes('c√¥ng vi·ªác')) {
    return PROJECT_PROMPTS.specific_projects.find(p => p.q.includes('task management'))?.a || "Task management project info not found";
  }
  
  // Social Media
  if (lowerQuery.includes('social media') || lowerQuery.includes('m·∫°ng x√£ h·ªôi')) {
    return PROJECT_PROMPTS.specific_projects.find(p => p.q.includes('social media'))?.a || "Social media project info not found";
  }
  
  // Blog Platform
  if (lowerQuery.includes('blog') || lowerQuery.includes('vi·∫øt')) {
    return PROJECT_PROMPTS.specific_projects.find(p => p.q.includes('blog platform'))?.a || "Blog platform project info not found";
  }
  
  // Cryptocurrency
  if (lowerQuery.includes('crypto') || lowerQuery.includes('bitcoin') || lowerQuery.includes('ti·ªÅn ·∫£o')) {
    return PROJECT_PROMPTS.specific_projects.find(p => p.q.includes('cryptocurrency'))?.a || "Cryptocurrency project info not found";
  }
  
  // Recipe App
  if (lowerQuery.includes('recipe') || lowerQuery.includes('m√≥n ƒÉn') || lowerQuery.includes('n·∫•u ƒÉn')) {
    return PROJECT_PROMPTS.specific_projects.find(p => p.q.includes('recipe'))?.a || "Recipe app project info not found";
  }
  
  // Fitness Tracker
  if (lowerQuery.includes('fitness') || lowerQuery.includes('gym') || lowerQuery.includes('t·∫≠p gym')) {
    return PROJECT_PROMPTS.specific_projects.find(p => p.q.includes('fitness'))?.a || "Fitness tracker project info not found";
  }
  
  // Music Streaming
  if (lowerQuery.includes('music') || lowerQuery.includes('nh·∫°c') || lowerQuery.includes('streaming')) {
    return PROJECT_PROMPTS.specific_projects.find(p => p.q.includes('music streaming'))?.a || "Music streaming project info not found";
  }
  
  return "T√¥i ch∆∞a c√≥ th√¥ng tin chi ti·∫øt v·ªÅ d·ª± √°n n√†y. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ: Portfolio Website, Weather Dashboard, E-commerce Platform, Task Management App, Social Media App, Blog Platform, Cryptocurrency Tracker, Recipe App, Fitness Tracker, ho·∫∑c Music Streaming App.";
}

// Find best matching response
function findBestResponse(query: string, intent: string) {
  // Handle specific project queries
  if (intent === 'specific_projects') {
    return findSpecificProjectResponse(query);
  }
  
  const prompts = PROJECT_PROMPTS[intent as keyof typeof PROJECT_PROMPTS] || PROJECT_PROMPTS.projects_general;
  
  // Try to find exact or partial match
  for (const prompt of prompts) {
    const similarity = calculateSimilarity(query.toLowerCase(), prompt.q.toLowerCase());
    if (similarity > 0.3) {
      return prompt.a;
    }
  }
  
  // Return random response from category
  const randomPrompt = prompts[Math.floor(Math.random() * prompts.length)];
  return randomPrompt.a;
}

// Calculate text similarity
function calculateSimilarity(str1: string, str2: string): number {
  const words1 = str1.split(' ');
  const words2 = str2.split(' ');
  const intersection = words1.filter(word => words2.includes(word));
  const union = [...new Set([...words1, ...words2])];
  return intersection.length / union.length;
}

// Enhanced response with project data
async function generateProjectResponse(query: string, intent: string) {
  const baseResponse = findBestResponse(query, intent);
  const projects = await getProjects();
  
  let enhancedResponse = baseResponse;
  
  // For specific project queries, return detailed response directly
  if (intent === 'specific_projects') {
    enhancedResponse += "\n\nüí° **Mu·ªën bi·∫øt th√™m?** H·ªèi v·ªÅ:\n";
    enhancedResponse += "‚Ä¢ Tech stack chi ti·∫øt\n";
    enhancedResponse += "‚Ä¢ Demo live ho·∫∑c source code\n";
    enhancedResponse += "‚Ä¢ Challenges v√† solutions\n";
    enhancedResponse += "‚Ä¢ C√°c d·ª± √°n kh√°c";
    return enhancedResponse;
  }
  
  // Add project list for general queries
  if (intent === 'projects_general' && projects.length > 0) {
    enhancedResponse += "\n\nüìÇ **Recent Projects:**\n";
    projects.slice(0, 3).forEach((project, index) => {
      enhancedResponse += `${index + 1}. **${project.title}** - ${project.description}\n`;
    });
    enhancedResponse += "\nüí¨ **D·ª± √°n b·∫°n mu·ªën bi·∫øt chi ti·∫øt:**\n";
    enhancedResponse += "‚Ä¢ Portfolio Website (v·ªõi AI Chatbot)\n";
    enhancedResponse += "‚Ä¢ Weather Dashboard\n";
    enhancedResponse += "‚Ä¢ E-commerce Platform\n";
    enhancedResponse += "‚Ä¢ Task Management App\n";
    enhancedResponse += "‚Ä¢ Social Media App\n";
    enhancedResponse += "‚Ä¢ Blog Platform\n";
    enhancedResponse += "‚Ä¢ Cryptocurrency Tracker\n";
    enhancedResponse += "‚Ä¢ Recipe App\n";
    enhancedResponse += "‚Ä¢ Fitness Tracker\n";
    enhancedResponse += "‚Ä¢ Music Streaming App\n";
    enhancedResponse += "\nV√≠ d·ª•: 'Cho t√¥i th√¥ng tin v·ªÅ Weather Dashboard'";
  }
  
  // Add tech stack info
  if (intent === 'techstack') {
    enhancedResponse += "\n\n‚ö° **Main Tech Stack:**\n";
    enhancedResponse += "‚Ä¢ Frontend: React, Next.js, TypeScript, Tailwind CSS\n";
    enhancedResponse += "‚Ä¢ Backend: Node.js, PostgreSQL, Prisma\n";
    enhancedResponse += "‚Ä¢ Tools: Docker, GitHub Actions, Vercel\n";
    enhancedResponse += "‚Ä¢ AI/ML: OpenAI API, Custom Learning System";
  }
  
  return enhancedResponse;
}

export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url);
    const query = searchParams.get('query') || '';
    
    if (!query) {
      return NextResponse.json({ 
        error: 'Query parameter required' 
      }, { status: 400 });
    }

    const intent = detectProjectIntent(query);
    const response = await generateProjectResponse(query, intent);
    
    return NextResponse.json({
      response,
      intent,
      source: 'projects_service',
      confidence: 0.9,
      category: 'projects'
    });

  } catch (error) {
    console.error('Projects service error:', error);
    return NextResponse.json({
      response: "Xin l·ªói, t√¥i g·∫∑p l·ªói khi l·∫•y th√¥ng tin projects. H√£y th·ª≠ l·∫°i!",
      intent: 'error',
      source: 'projects_error',
      confidence: 0.1
    }, { status: 500 });
  }
}
